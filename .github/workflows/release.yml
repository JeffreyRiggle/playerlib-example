on: 
    push:
        branches:
            - master

name: Create Release

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            
            - name: Set up JDK
              uses: actions/setup-java@v1
              with:
                java-version: '11'

            - name: Setup Maven
              env:
                TOKEN: ${{ secrets.GITHUBTOKEN }}
                USERNAME: JeffreyRiggle
              run: |
                envsubst < settings.tmpl > ~/.m2/settings.xml

            - name: Version Bump
              if: startsWith(github.event.head_commit.message, 'Auto Version') != true
              run: |
                read_dom() {
                  IFS=\>
                  read -d \< ENTITY CONTENT
                }

                version=""

                while read_dom; do
                    if [[ $ENTITY = "version" ]]; then
                        version=$CONTENT
                        break
                    fi
                done < pom.xml

                IFS='.' read -r -a sections <<< "$version"
                patchVersion="${sections[2]}"
                newPatchVersion="$(($patchVersion + 1))"
                newVersion="${sections[0]}.${sections[1]}.${newPatchVersion}"
                contents=`cat pom.xml`
                echo "${contents//<version>$version</<version>$newVersion<}" > pom.xml
                
                git config --local user.email "$(git log --format='%ae' HEAD^!)"
                git config --local user.name "$(git log --format='%an' HEAD^!)"
                git add pom.xml
                git commit -m "Auto Version"
                git push

            - name: Build with Maven
              if: startsWith(github.event.head_commit.message, 'Auto Version') != true
              run: mvn install
            
            - name: Copy Release
              if: startsWith(github.event.head_commit.message, 'Auto Version') != true
              run: |
                files=("target/*.jar")
                cp ${files[0]} PlayerLibExample.jar

            - name: Create Release
              if: startsWith(github.event.head_commit.message, 'Auto Version') != true
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.repository }}@${{ github.run_number }}
                release_name: Release ${{ github.repository }}@${{ github.run_number }}
                body: |
                  New release
                draft: false
                prerelease: false
            
            - name: Upload build
              if: startsWith(github.event.head_commit.message, 'Auto Version') != true
              id: upload_build
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }}
                asset_path: ./PlayerLibExample.jar
                asset_name: PlayerLibExample.jar
                asset_content_type: application/java-archive
                
            - name: Build Site
              if: startsWith(github.event.head_commit.message, 'Auto Version') != true
              run: |
                curl -XPOST -u "JeffreyRiggle:${{secrets.SITETOKEN}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/JeffreyRiggle/my-site/dispatches --data '{"event_type": "release_site"}'
